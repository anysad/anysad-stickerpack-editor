import flixel.FlxCamera;
import flixel.FlxState;
import flixel.FlxSprite;
import flixel.FlxG;
import flixel.group.FlxTypedGroup;
import flixel.util.FlxArrayUtil;
import flixel.math.FlxMath;
import flixel.util.FlxSort;
import flixel.util.FlxTimer;

import funkin.ui.MusicBeatState;
import funkin.ui.mainmenu.MainMenuState;
import funkin.ui.transition.stickers.StickerSprite;
import funkin.ui.debug.charting.ChartEditorState;
import funkin.data.stickers.StickerRegistry;
import funkin.graphics.FunkinSprite;
import funkin.input.Cursor;
import funkin.audio.FunkinSound;
import funkin.modding.PolymodHandler;
import funkin.util.FileUtil;
import funkin.util.WindowUtil;

import haxe.Json;
import haxe.ui.RuntimeComponentBuilder;
import haxe.ui.components.Label;
import haxe.ui.components.Image;
import haxe.ui.components.Button;
import haxe.ui.components.TabBar;
import haxe.ui.components.Column;
import haxe.ui.components.DropDown;
import haxe.ui.components.TextArea;
import haxe.ui.components.CheckBox;
import haxe.ui.components.TextField;
import haxe.ui.components.ColorPicker;
import haxe.ui.components.NumberStepper;
import haxe.ui.components.pickers.MenuItemPicker;

import haxe.ui.containers.Box;
import haxe.ui.containers.HBox;
import haxe.ui.containers.VBox;
import haxe.ui.containers.Header;
import haxe.ui.containers.TabView;
import haxe.ui.containers.ListView;
import haxe.ui.containers.TableView;
import haxe.ui.containers.TableView;
import haxe.ui.containers.ScrollView;
import haxe.ui.containers.HorizontalSplitter;
import haxe.ui.containers.menus.Menu;
import haxe.ui.containers.menus.MenuBar;
import haxe.ui.containers.menus.MenuItem;
import haxe.ui.containers.menus.MenuCheckBox;
import haxe.ui.containers.menus.MenuOptionBox;
import haxe.ui.containers.menus.MenuSeparator;
import haxe.ui.containers.dialogs.Dialog;
import haxe.ui.containers.dialogs.MessageBox;
import haxe.ui.containers.windows.Window;
import haxe.ui.containers.windows.WindowManager;

import haxe.ui.notifications.NotificationManager;
import haxe.ui.notifications.NotificationType;
import haxe.io.Bytes;

import openfl.net.URLLoader;
import openfl.net.URLRequest;

using funkin.util.tools.StringTools;
using StringTools;

class StickerpackEditor extends MusicBeatState
{
    var windowManager = new WindowManager();
    var notificationManager = new NotificationManager();

    var currentStickerpackData;
    var grpStickers:FlxTypedGroup<StickerSprite>;

    var menuBar:MenuBar;
    var saveStickerpackMenuItem:MenuItem;
    var exitMenuItem:MenuItem;
    // var userGuideMenuItem:MenuItem;
    var checkForUpdatesMenuItem:MenuItem;
    var menubarTestButton:Button;

    var stickerpackDataWindow:Window;
    var stickerEditWindow:Window;
    var stickerAdditionWindow:Window;
    var updateAvailableWindow:Window;

    var stickerpacks = [];
    var modVersion:String = '???';

    var stickerpackDropdown:DropDown;
    var stickerpackName:TextField;
    var stickerpackArtist:TextField;
    var stickerEntryListView:ListView;
    var createStickerEntryButton:Button;
    var deleteStickerEntryButton:Button;
    var editStickerEntryButton:Button;

    var stickerAssetPath:TextField;
    var stickerPreview:Image;

    public function new()
    {
        super('StickerpackEditor');
    }

    function create():Void
    {
        super.create();
        var chartEditor = new ChartEditorState();

        checkForUpdates();

        modVersion = PolymodHandler.getAllMods().filter(function(item) {
            return item.title.indexOf("anysad Stickerpack Editor") != -1;
        })[0].modVersion.version.join('.');

        var bg = new FunkinSprite(0, 0).loadGraphic(Paths.image('menuDesat'));
		bg.scrollFactor.set(0, 0);
		bg.setGraphicSize(FlxG.width, FlxG.height);
		bg.updateHitbox();
		bg.screenCenter();
		bg.alpha = 0.25;
		add(bg);

        Cursor.show();

        WindowUtil.setWindowTitle("Friday Night Funkin' Stickerpack Editor");

        grpStickers = new FlxTypedGroup();
        add(grpStickers);

        menuBar = RuntimeComponentBuilder.build(Paths.ui('stickerpack-editor/menubar'));
        add(menuBar);

        menubarTestButton = menuBar.findComponent('menubarTestButton');
        menubarTestButton.onClick = () -> {
            if (currentStickerpackData == null)
            {
                selectionMissingNotification();
                return;
            }
            regenStickers();
        }

        saveStickerpackMenuItem = menuBar.findComponent('saveStickerpack');
        saveStickerpackMenuItem.onClick = () -> saveStickerpack();

        exitMenuItem = menuBar.findComponent('exit');
        exitMenuItem.onClick = () -> FlxG.switchState(() -> new MainMenuState());

        checkForUpdatesMenuItem = menuBar.findComponent('checkForUpdates');
        checkForUpdatesMenuItem.onClick = () -> checkForUpdates();

        var stickerpackRegistry = new StickerRegistry();
        stickerpackRegistry.loadEntries();
        stickerpacks = [];
        for (stickerpack in stickerpackRegistry.entries)
        {
            stickerpacks.push({
                name: stickerpack._data.name,
                value: stickerpack._data
            });
        }

        stickerpackDataWindow = RuntimeComponentBuilder.build(Paths.ui('stickerpack-editor/windows/stickerpackDataWindow'));
        stickerpackDataWindow.windowManager = windowManager;
        add(stickerpackDataWindow);

        stickerpackDataWindow.x = 5;
        stickerpackDataWindow.y = menuBar.height + 5;

        stickerpackDropdown = stickerpackDataWindow.findComponent('stickerpackDropdown');
        for (stickerpack in stickerpacks) stickerpackDropdown.dataSource.add({ text: stickerpack.name, value: stickerpack.value });

        stickerpackName = stickerpackDataWindow.findComponent('stickerpackName');
        stickerpackArtist = stickerpackDataWindow.findComponent('stickerpackArtist');
        stickerEntryListView = stickerpackDataWindow.findComponent('stickerEntryListView');

        stickerpackDropdown.onChange = () -> {
            stickerpackRegistry.loadEntries();

            var selectedName = stickerpackDropdown.selectedItem.text;
            var selectedStickerPackData = null;

            for (stickerpack in stickerpackRegistry.entries)
            {
                if (stickerpack._data.name == selectedName)
                {
                    selectedStickerPackData = stickerpack._data;
                    break;
                }
            }

            currentStickerpackData = selectedStickerPackData;

            stickerpackName.text = currentStickerpackData.name;
            stickerpackArtist.text = currentStickerpackData.artist;

            reloadStickers();

            if (currentStickerpackData.stickers != null && currentStickerpackData.stickers.length > 0)
            {
                stickerEntryListView.selectedIndex = 0;
                var selectedSticker = stickerEntryListView.selectedItem;
                stickerAssetPath.text = selectedSticker.text;
            }
            else
            {
                stickerEntryListView.selectedIndex = -1;
                stickerAssetPath.text = "";
                if (stickerPreview != null)
                {
                    stickerPreview.set_value(Paths.image('transitionSwag/error-sticker'));
                    stickerPreview.imageScale = 0.4;
                }
            }
        }

        stickerEditWindow = RuntimeComponentBuilder.build(Paths.ui('stickerpack-editor/windows/stickerEditWindow'));
        stickerEditWindow.windowManager = windowManager;
        add(stickerEditWindow);

        stickerEditWindow.x = stickerpackDataWindow.width + 5;
        stickerEditWindow.y = menuBar.height + 5;

        stickerAssetPath = stickerEditWindow.findComponent('stickerAssetPath');
        stickerPreview = stickerEditWindow.findComponent('stickerPreview');

        stickerEntryListView.onChange = () -> {
            if (stickerEntryListView.selectedIndex >= 0)
            {
                var selectedSticker = stickerEntryListView.selectedItem;
                stickerAssetPath.text = selectedSticker.text;
                if (stickerPreview != null)
                {
                    stickerPreview.set_value(selectedSticker.icon.resource);
                    stickerPreview.imageScale = 0.4;
                }
            }
        }

        stickerAssetPath.onChange = () -> {
            if (stickerEntryListView.selectedIndex < 0) return;
            currentStickerpackData.stickers[stickerEntryListView.selectedIndex] = stickerAssetPath.text;

            if (doesFileExist(Paths.image(stickerAssetPath.text)))
            {
                stickerAssetPath.color = 0x00aaaaaa;
                stickerPreview.set_value(Paths.image(stickerAssetPath.text));
            }
            else
            {
                stickerAssetPath.color = 0x00ff0000;
                stickerPreview.set_value(Paths.image('transitionSwag/error-sticker'));
            }

            reloadStickers();
        }

        deleteStickerEntryButton = stickerpackDataWindow.findComponent('deleteStickerEntryButton');
        deleteStickerEntryButton.onClick = () -> {
            if (currentStickerpackData == null)
            {
                selectionMissingNotification();
                return;
            }
            var idx = currentStickerpackData.stickers.indexOf(stickerAssetPath.text);
            if (idx == -1) return;
            currentStickerpackData.stickers.splice(idx, 1);
            reloadStickers();
            if (currentStickerpackData.stickers.length > 0)
            {
                stickerEntryListView.selectedIndex = 0;
                var selectedSticker = stickerEntryListView.selectedItem;
                stickerAssetPath.text = selectedSticker.text;
                stickerPreview.set_value(selectedSticker.icon.resource);
                stickerPreview.imageScale = 0.4;
            }
            else
            {
                stickerEntryListView.selectedIndex = -1;
                stickerAssetPath.text = "";
                stickerPreview.set_value(Paths.image('transitionSwag/error-sticker'));
                stickerPreview.imageScale = 0.4;
            }
        }

        createStickerEntryButton = stickerpackDataWindow.findComponent('createStickerEntryButton');
        createStickerEntryButton.onClick = () -> {
            if (currentStickerpackData == null)
            {
                selectionMissingNotification();
                return;
            }
            stickerAdditionWindow = RuntimeComponentBuilder.build(Paths.ui('stickerpack-editor/windows/stickerAdditionWindow'));
            stickerAdditionWindow.windowManager = windowManager;
            stickerAdditionWindow.screenCenter();
            stickerAdditionWindow.y -= 50;
            add(stickerAdditionWindow);

            var stickerAssetPathField:TextField = stickerAdditionWindow.findComponent('stickerAdditionAssetPath');
            var stickerPreviewImage:Image = stickerAdditionWindow.findComponent('stickerAdditionPreview');

            stickerAssetPathField.onChange = () -> {
                if (doesFileExist(Paths.image(stickerAssetPathField.text)))
                {
                    stickerAssetPathField.color = 0x00aaaaaa;
                    stickerPreviewImage.set_value(Paths.image(stickerAssetPathField.text));
                }
                else
                {
                    stickerAssetPathField.color = 0x00ff0000;
                    stickerPreviewImage.set_value(Paths.image('transitionSwag/error-sticker'));
                }
                stickerAdditionWindow.screenCenter();
                // stickerAdditionWindow.y -= 50;
            }

            var stickerAdditionButton:Button = stickerAdditionWindow.findComponent('stickerAdditionButton');
            stickerAdditionButton.onClick = () -> {
                if (stickerAssetPathField.text == null || stickerAssetPathField.text == '') return;

                currentStickerpackData.stickers.push(stickerAssetPathField.text);
                reloadStickers();

                windowManager.closeWindow(stickerAdditionWindow);
            };
            var cancelStickerAdditionButton:Button = stickerAdditionWindow.findComponent('cancelStickerAdditionButton');
            cancelStickerAdditionButton.onClick = () -> windowManager.closeWindow(stickerAdditionWindow);
        }
    }

    function selectionMissingNotification():Void
    {
        notificationManager.addNotification({
            title: "No Stickerpack Selected",
            body: "Uh oh! You need to select a stickerpack before you can test it. Please do so in the Stickerpack Data Window.",
            type: NotificationType.Error,
            expiryMs: 5000
        });
    }

    function reloadStickers():Void
    {
        if (currentStickerpackData == null) return;
        if (currentStickerpackData.stickers == null || currentStickerpackData.stickers.length == 0) return;
        if (stickerEntryListView.dataSource == null) return;

        stickerEntryListView.dataSource.clear();
        for (sticker in currentStickerpackData.stickers)
        {
            if (sticker == null || sticker == '') continue;

            var stickerImage:String = sticker;
            if (!doesFileExist(Paths.image(sticker))) stickerImage = 'transitionSwag/error-sticker';

            stickerEntryListView.dataSource.add({
                text: sticker,
                icon: { resource: Paths.image(stickerImage), imageScale: 0.3 },
            });
        }
    }

    // copied almost straight from the StickerSubState, soggy!
    function regenStickers():Void
    {
        if (grpStickers.members.length > 0)
        {
            grpStickers.clear();
        }

        var xPos:Float = -100;
        var yPos:Float = -100;
        while (xPos <= FlxG.width)
        {
            var stickerPath:String = getRandomStickerPath();
            var sticky:StickerSprite = new StickerSprite(0, 0, stickerPath);
            sticky.visible = false;

            sticky.x = xPos;
            sticky.y = yPos;
            xPos += sticky.frameWidth * 0.5;

            if (xPos >= FlxG.width)
            {
                if (yPos <= FlxG.height)
                {
                    xPos = -100;
                    yPos += FlxG.random.float(70, 120);
                }
            }

            sticky.angle = FlxG.random.int(-60, 70);
            grpStickers.add(sticky);
        }

        shuffleStickers(grpStickers.members);

        var lastStickerPath:String = getRandomStickerPath();
        var lastSticker:StickerSprite = new StickerSprite(0, 0, lastStickerPath);
        lastSticker.visible = false;
        lastSticker.updateHitbox();
        lastSticker.angle = 0;
        lastSticker.screenCenter();
        grpStickers.add(lastSticker);

        stickerpackDataWindow.x = stickerpackDataWindow.y = -1000;
        stickerEditWindow.x = stickerEditWindow.y = -1000;

        for (ind => sticker in grpStickers.members)
        {
            sticker.timing = FlxMath.remapToRange(ind, 0, grpStickers.members.length, 0, 0.9);

            new FlxTimer().start(sticker.timing, _ -> {
                if (grpStickers == null) return;

                sticker.visible = true;
                var daSound:String = 'stickersounds/keys/keyClick' + FlxG.random.int(1, 9);
                FunkinSound.playOnce(Paths.sound(daSound));

                var frameTimer:Int = FlxG.random.int(0, 2);

                // always make the last one POP
                if (ind == grpStickers.members.length - 1) frameTimer = 2;

                new FlxTimer().start((1 / 24) * frameTimer, _ -> {
                    if (sticker == null) return;

                    sticker.scale.x = sticker.scale.y = FlxG.random.float(0.97, 1.02);
                });

                if (ind == grpStickers.members.length - 1)
                {
                    new FlxTimer().start(1.5, _ -> {
                        degenStickers();
                    });
                }
            });
        }

        grpStickers.sort((ord, a, b) -> {
            return FlxSort.byValues(ord, a.timing, b.timing);
        });
    }

    public function degenStickers():Void
    {
        grpStickers.cameras = FlxG.cameras.list;

        if (grpStickers.members == null || grpStickers.members.length == 0) return;

        for (ind => sticker in grpStickers.members)
        {
            new FlxTimer().start(sticker.timing, _ -> {
                sticker.visible = false;
                var daSound:String = 'stickersounds/keys/keyClick' + FlxG.random.int(1, 9);
                FunkinSound.playOnce(Paths.sound(daSound));
            });

            if (ind == grpStickers.members.length - 1)
            {
                new FlxTimer().start(sticker.timing, _ -> {
                    stickerpackDataWindow.x = 5;
                    stickerpackDataWindow.y = menuBar.height + 5;
                    stickerEditWindow.x = stickerpackDataWindow.width + 5;
                    stickerEditWindow.y = menuBar.height + 5;
                });
            }
        }
    }

    function getRandomStickerPath():String
    {
        var stickers = currentStickerpackData.stickers;
        if (stickers == null || stickers.length == 0) return null;
        var idx = FlxG.random.int(0, stickers.length - 1);
        return stickers[idx];
    }

    function shuffleStickers(stickers:Array<Dynamic>):Void
    {
        var maxValidIndex = stickers.length - 1;
        for (i in 0...maxValidIndex)
        {
            var randomIndex = FlxG.random.int(0, maxValidIndex);
            var temp = stickers[i];
            stickers[i] = stickers[randomIndex];
            stickers[randomIndex] = temp;
        }
    }

    function doesFileExist(filePath:String):Bool
    {
        return Assets.exists(filePath);
    }

    function fixPath(path:String):String
    {
        var stringSplit = path.split("\\");
        while (stringSplit.length > 0 && stringSplit[0] != "mods") stringSplit.shift();

        if (stringSplit.length == 0) return path;
        path = stringSplit.join("/");
        return path;
	}

    function saveFile():Void
    {
        FileUtil.browseForSaveFile([FileUtil.FILE_FILTER_JSON], (path) -> {
            var fileString = Json.stringify(currentStickerpackData, null, "\t");
		    var fileBytes:Bytes = Bytes.ofString(fileString);
            FileUtil.writeBytesToPath(fixPath(path), fileBytes);
            notificationManager.addNotification({
                title: "Saved Stickerpack",
                body: "Successfully saved stickerpack to " + FileUtil.sanitizePath(fixPath(path)),
                type: NotificationType.Success,
                expiryMs: 5000
            });
        }, null, currentStickerpackData.name.toLowerCase().sanitize() + '.json');
    }

    function saveStickerpack():Void
    {
        if (currentStickerpackData == null)
        {
            selectionMissingNotification();
            return;
        }
        saveFile();
    }

    function checkForUpdates():Void
    {
        var urlLoader = new URLLoader();
        urlLoader.addEventListener("complete", () -> {
			var version = Json.parse(urlLoader.data).mod_version;
			if (version == null) version = "UNKNOWN";
            if (version != modVersion)
            {
                if (updateAvailableWindow == null || !updateAvailableWindow.visible)
                {
                    updateAvailableWindow = RuntimeComponentBuilder.build(Paths.ui('stickerpack-editor/windows/updateAvailableWindow'));
                    updateAvailableWindow.windowManager = windowManager;
                    add(updateAvailableWindow);
                    updateAvailableWindow.screenCenter();

                    var versions = updateAvailableWindow.findComponent('updateAvailableVersions');
                    versions.text = 'Current Version: ' + modVersion + '\nNew Version: ' + version;

                    var updateButton = updateAvailableWindow.findComponent('updateAvailableUpdateButton');
                    updateButton.onClick = () -> FlxG.openURL('https://gamebanana.com/tools/21060');

                    var closeButton = updateAvailableWindow.findComponent('updateAvailableCloseButton');
                    closeButton.onClick = () -> windowManager.closeWindow(updateAvailableWindow);
                }
                else windowManager.closeWindow(updateAvailableWindow);
            }
            else
            {
                notificationManager.addNotification({
                    title: "No Update Available",
                    body: "Your stickerpack editor is currently up to date. Hooray!",
                    type: NotificationType.Success,
                    expiryMs: 5000
                });
            }
        });

        var url = "https://raw.githubusercontent.com/anysad/anysad-stickerpack-editor/refs/heads/main/_polymod_meta.json"; 
		urlLoader.load(new URLRequest(url));
    }

    function pressingControl():Bool
    {
        return FlxG.keys.pressed.CONTROL || FlxG.keys.pressed.WINDOWS;
    }

    function destroy()
    {
		super.destroy();
        Cursor.hide();
		WindowUtil.setWindowTitle("Friday Night Funkin'");
	}

    function update()
    {
        super.update();
        if (pressingControl() && FlxG.keys.justPressed.Q) FlxG.switchState(() -> new MainMenuState());
        if (pressingControl() && FlxG.keys.justPressed.S) saveStickerpack();
    }
}